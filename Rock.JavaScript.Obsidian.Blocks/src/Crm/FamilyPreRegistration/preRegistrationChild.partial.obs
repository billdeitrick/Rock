<template>
    <RockButton
        btnSize="xs"
        btnType="danger"
        class="pull-right"
        :isSquare="true"
        @click="$emit('remove', child)">
        <i class="fa fa-times"></i>
    </RockButton>

    <h4 class="child-caption">
        {{ caption }}
    </h4>

    <div class="row">
        <div :class="getColumnClass(6)">
            <DropDownList
                v-model="child.familyRoleGuid"
                :items="config.childRelationshipTypes ?? undefined"
                label="Relationship to Adult"
                rules="required"
                :showBlankItem="false" />
        </div>
        <div :class="getColumnClass(6)"></div><!-- filler/blocker column -->
    </div>

    <div class="row clearfix">
        <div :class="getColumnClass(3)">
            <ReadonlyField
                v-if="child.isFirstNameReadOnly"
                label="First Name"
                :modelValue="child.firstName" />
            <TextBox v-else
                v-model="child.firstName"
                label="First Name"
                rules="required" />
        </div>

        <div :class="getColumnClass(3)">
            <ReadonlyField
                v-if="child.isLastNameReadOnly"
                label="Last Name"
                :modelValue="child.lastName" />
            <TextBox v-else
                v-model="child.lastName"
                label="Last Name"
                rules="required" />
        </div>

        <div v-if="!config.isChildGenderHidden" :class="getColumnClass(3)">
            <GenderDropDownList
                v-model="child.genderStringValue"
                label="Gender"
                :rules="!config.isChildGenderOptional ? 'required' : ''" />
        </div>

        <div v-if="!config.isChildSuffixHidden" :class="getColumnClass(3)">
            <DefinedValuePicker
                v-model="child.suffixListItemBag"
                :definedTypeGuid="DefinedType.PersonSuffix"
                label="Suffix"
                lazyMode="lazy"
                :showBlankItem="true" />
        </div>

        <div v-if="!config.isChildBirthDateHidden" :class="getColumnClass(6)">
            <BirthdayPicker
                v-model="child.birthDate"
                label="Birth Date"
                :rules="!config.isChildBirthDateOptional ? 'required' : ''" />
        </div>

        <div v-if="!config.isChildGradeHidden" :class="getColumnClass(3)">
            <GradePicker
                v-model="child.gradeListItemBag"
                label="Grade"
                lazyMode="lazy"
                :useGuidAsValue="true"
                :rules="!config.isChildGradeOptional ? 'required' : ''"
                :showBlankItem="true" />
        </div>

        <div v-if="!config.isChildMobilePhoneHidden" :class="getColumnClass(3)">
            <PhoneNumberBox
                v-model="child.mobilePhone"
                v-model:countryCode="child.mobilePhoneCountryCode"
                label="Mobile Phone"
                :rules="!config.isChildMobilePhoneOptional ? 'required' : ''" />
        </div>

        <div v-if="!config.isChildEmailHidden" :class="getColumnClass(6)">
            <EmailBox
                v-model="child.email"
                label="Email"
                :rules="!config.isChildEmailOptional ? 'required' : ''" />
        </div>

        <div v-if="!config.isChildDisplayCommunicationPreferenceHidden" :class="getColumnClass(6)">
            <RadioButtonList
                v-model="child.communicationPreferenceStringValue"
                :horizontal="true"
                :items="[
                    { text: 'Email', value: CommunicationPreference.Email.toString() },
                    { text: 'SMS', value: CommunicationPreference.SMS.toString() }
                ]"
                label="Communication Preference" />
        </div>

        <div v-if="!config.isChildRaceHidden" :class="getColumnClass(3)">
            <RacePicker
                v-model="child.raceListItemBag"
                :rules="!config.isChildRaceOptional ? 'required' : ''"
                :showBlankItem="true" />
        </div>

        <div v-if="!config.isChildEthnicityHidden" :class="getColumnClass(3)">
            <EthnicityPicker
                v-model="child.ethnicityListItemBag"
                :rules="!config.isChildEthnicityOptional ? 'required' : ''"
                :showBlankItem="true" />
        </div>
    </div>
    <div v-if="!config.isChildProfilePhotoHidden" class="row">
        <div :class="getColumnClass(6)">
            <ImageUploader
                v-model="child.profileImageListItemBag"
                label="Profile Photo" />
        </div>
        <div :class="getColumnClass(6)"></div><!-- filler/blocker column -->
    </div>

    <div class="row">
        <AttributeValuesContainer
            v-if="config.childAttributes != null"
            v-model="child.attributeValues"
            :attributes="config.childAttributes"
            columnBreakpoint="sm"
            :displayWithinExistingRow="true"
            id="phAttributes2"
            isEditMode
            :numberOfColumns="12 / getColumns(3)"
            :showCategoryLabel="true" />
    </div>
</template>

<style scoped>
.child-caption {
    text-transform: capitalize;
}
</style>

<script setup lang="ts">
    import { PropType, computed, ref, watch } from "vue";
    import ReadonlyField from "./readonlyField.partial.obs";
    import { ChildRequestBag } from "./types.partial";
    import { createEditablePerson, getNumberAsOrdinalString, useGetColumnClass, useGetColumns } from "./utils.partial";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer";
    import BirthdayPicker from "@Obsidian/Controls/birthdayPicker";
    import DefinedValuePicker from "@Obsidian/Controls/definedValuePicker.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList";
    import EmailBox from "@Obsidian/Controls/emailBox";
    import EthnicityPicker from "@Obsidian/Controls/ethnicityPicker.obs";
    import GenderDropDownList from "@Obsidian/Controls/genderDropDownList";
    import GradePicker from "@Obsidian/Controls/gradePicker";
    import ImageUploader from "@Obsidian/Controls/imageUploader";
    import PhoneNumberBox from "@Obsidian/Controls/phoneNumberBox.obs";
    import RacePicker from "@Obsidian/Controls/racePicker.obs";
    import RadioButtonList from "@Obsidian/Controls/radioButtonList";
    import RockButton from "@Obsidian/Controls/rockButton";
    import TextBox from "@Obsidian/Controls/textBox";
    import { CommunicationPreference } from "@Obsidian/Enums/Blocks/Crm/FamilyPreRegistration/communicationPreference";
    import { DefinedType } from "@Obsidian/SystemGuids/definedType";
    import { useConfigurationValues } from "@Obsidian/Utility/block";
    import { FamilyPreRegistrationInitializationBox } from "@Obsidian/ViewModels/Blocks/Crm/FamilyPreRegistration/familyPreRegistrationInitializationBox";

    const config = useConfigurationValues<FamilyPreRegistrationInitializationBox>();
    const getColumnClass = useGetColumnClass(config);
    const getColumns = useGetColumns(config);

    const props = defineProps({
        childNumber: {
            type: Number as PropType<number>,
            required: true
        },

        child: {
            type: Object as PropType<ChildRequestBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "remove", value: ChildRequestBag): void
    }>();

    //#region Values

    const childRequest = ref<ChildRequestBag>(props.child);
    const child = createEditablePerson(childRequest);

    //#endregion

    //#region Computed Values

    const caption = computed<string>(() => {
        return `${getNumberAsOrdinalString(props.childNumber)} Child`;
    });

    //#endregion

    //#region Watchers

    watch(() => props.child, () => {
        childRequest.value = props.child;
    });

    //#endregion
</script>