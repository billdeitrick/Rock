<template>
    <RockButton
        btnSize="xs"
        btnType="danger"
        class="pull-right"
        :isSquare="true"
        @click="$emit('remove', child)">
        <i class="fa fa-times"></i>
    </RockButton>

    <h4>
        Child<!-- TODO JMH Use "First Child" caption from server. -->
    </h4>

    <div class="row">
        <div class="col-sm-6">
            <DropDownList
                v-model="relationshipGuid"
                :items="relationships"
                label="Relationship to Adult"
                rules="required"
                :showBlankItem="false" />
        </div>
        <div class="col-sm-6"></div><!-- filler/blocker column -->
    </div>

    <div class="row clearfix">
        <div class="col-sm-3">
            <TextBox
                v-model="child.firstName"
                label="First Name"
                rules="required" />
        </div>

        <div class="col-sm-3">
            <TextBox
                v-model="child.lastName"
                label="Last Name"
                rules="required" />
        </div>

        <div class="col-sm-3">
            <GenderDropDownList
                v-model="child.gender"
                label="Gender"
                rules="required" />
        </div>

        <div class="col-sm-3">
            <DefinedValuePicker
                v-model="childSuffixDefinedValueGuid"
                :definedTypeGuid="DefinedType.PersonSuffix"
                label="Suffix"
                :showBlankItem="true" />
        </div>

        <div class="col-sm-6">
            <BirthdayPicker
                v-model="child.birthDate"
                label="Birth Date"
                rules="required" />
        </div>

        <div class="col-sm-3">
            <DefinedValuePicker
                v-model="childGradeDefinedValueGuid"
                :definedTypeGuid="DefinedType.SchoolGrades"
                label="Grade"
                :showBlankItem="true" />
        </div>

        <div class="col-sm-3">
            <PhoneNumberBox
                v-model="child.mobilePhone"
                v-model:countryCode="child.mobilePhoneCountryCode"
                label="Mobile Phone" />
        </div>

        <div class="col-sm-6">
            <EmailBox
                v-model="child.email"
                label="Email" />
        </div>

        <div class="col-sm-6">
            <RadioButtonList
                v-model="childCommunicationPreferenceId"
                :horizontal="true"
                :items="[
                    { text: 'Email', value: CommunicationPreference.Email.toString() },
                    { text: 'SMS', value: CommunicationPreference.SMS.toString() }
                ]"
                label="Communication Preference" />
        </div>

        <div class="col-sm-3">
            <RacePicker
                v-model="childRaceListItemBag"
                :showBlankItem="true" />
        </div>

        <div class="col-sm-3">
            <EthnicityPicker
                v-model="childEthnicityListItemBag"
                rules="required"
                :showBlankItem="true" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-6">
            <ImageUploader
                v-model="childProfileImageListItemBag"
                label="Profile Photo" />
        </div>
        <div class="col-sm-6"></div>
    </div>

    <div class="row"></div>
</template>

<script setup lang="ts">
    import { PropType, computed, ref, watch } from "vue";
    import { PersonRequestBag } from "./types.partial";
    import { createListItemBagWrapper } from "./utils.partial";
    import BirthdayPicker from "@Obsidian/Controls/birthdayPicker";
    import DefinedValuePicker from "@Obsidian/Controls/definedValuePicker.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList";
    import EmailBox from "@Obsidian/Controls/emailBox";
    import EthnicityPicker from "@Obsidian/Controls/ethnicityPicker.obs";
    import GenderDropDownList from "@Obsidian/Controls/genderDropDownList";
    import ImageUploader from "@Obsidian/Controls/imageUploader";
    import PhoneNumberBox from "@Obsidian/Controls/phoneNumberBox.obs";
    import RacePicker from "@Obsidian/Controls/racePicker.obs";
    import RadioButtonList from "@Obsidian/Controls/radioButtonList";
    import RockButton from "@Obsidian/Controls/rockButton";
    import TextBox from "@Obsidian/Controls/textBox";
    import { CommunicationPreference } from "@Obsidian/Enums/Blocks/Crm/FamilyPreRegistration/communicationPreference";
    import { DefinedType } from "@Obsidian/SystemGuids/definedType";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";

    const props = defineProps({
        child: {
            type: Object as PropType<PersonRequestBag>,
            required: true
        },
        relationships: {
            type: Object as PropType<ListItemBag[]>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "remove", value: PersonRequestBag): void
    }>();

    const relationshipGuid = ref<string>("");
    const child = ref<PersonRequestBag>(props.child);
    const childSuffixDefinedValueGuid = createListItemBagWrapper(child, "suffixDefinedValueGuid");
    const childGradeDefinedValueGuid = createListItemBagWrapper(child, "gradeDefinedValueGuid");
    const childRaceListItemBag =  createListItemBagWrapper(child, "raceGuid");
    const childEthnicityListItemBag = createListItemBagWrapper(child, "ethnicityGuid");
    const childProfileImageListItemBag = createListItemBagWrapper(child, "profilePhotoGuid");

    const childCommunicationPreferenceId = computed<string>({
        get() {
            return child.value.communicationPreference?.toString();
        },
        set(newValue: string) {
            child.value.communicationPreference = CommunicationPreference[newValue];
        }
    });

    watch(() => props.child, () => {
        child.value = props.child;
    });
</script>