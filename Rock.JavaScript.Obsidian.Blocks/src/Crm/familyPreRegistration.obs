<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<!-- TODO JMH remove id attributes? -->
<template>
    <div ID="upnlContent">
        <NotificationBox v-if="errorText" id="nbError" alertType="danger" :heading="errorTitle ?? undefined">{{ errorText }}</NotificationBox>
        <RockForm>
            <Panel type="block" title="Family Pre-Registration">
                <template #default>
                    <Panel id="pnlVisit" title="Visit Information">
                        <div class="row">
                            <CampusPicker
                                v-if="!config.isCampusHidden"
                                v-model="campusListItemBag"
                                :campusStatusFilter="config.campusStatusesFilter || []"
                                :campusTypeFilter="config.campusTypesFilter || []"
                                formGroupClasses="col-md-4"
                                id="cpCampus"
                                label="Campus"
                                :rules="!config.isCampusOptional ? ['required'] : []"
                                :showBlankItem="true"
                                 />
                            <div v-if="!config.isPlannedVisitDatePanelHidden" class="col-md-5" id="pnlPlannedDate">
                                <DatePicker
                                    id="dpPlannedDate"
                                    :disallowPastDateSelection="true"
                                    label="Planned Visit Date"
                                    :rules="!config.isPlannedVisitDateOptional ? ['required'] : []" />
                            </div>
                            <div v-if="!config.isPlannedSchedulePanelHidden" class="col-md-7" id="pnlPlannedSchedule">
                                <div class="row">
                                    <div class="col-sm-6">
                                        <DropDownList
                                            v-model="selectedScheduleGuids"
                                            id="ddlScheduleDate"
                                            :items="scheduleDateItems"
                                            label="Planned Visit Date"
                                            :rules="!config.isPlannedVisitDateOptional ? ['required'] : []"
                                            :showBlankItem="config.isPlannedVisitDateOptional" />
                                    </div>
                                    <div class="col-sm-6">
                                        <DropDownList
                                            v-model="selectedTimeGuids"
                                            id="ddlScheduleTime"
                                            :items="scheduleTimeItems"
                                            label="Planned Visit Time"
                                            :rules="!config.isPlannedVisitDateOptional ? ['required'] : []"
                                            :showBlankItem="config.isPlannedVisitDateOptional" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </Panel>

                    <Panel id="pnlParents" title="Adult Information">
                        <template #default>
                            <asp:HiddenField ID="hfFamilyGuid" runat="server" />
                            <asp:HiddenField ID="hfAdultGuid1" runat="server" />
                            <asp:HiddenField ID="hfAdultGuid2" runat="server" />

                            <h4 class="heading-individual">First Adult</h4>

                            <div class="row">
                                <TextBox
                                    v-model="fullName"
                                    autocomplete="new-password"
                                    class="rock-fullname"
                                    id="tbRockFullName"
                                    placeholder="Please enter name (Required)" />

                                <NotificationBox
                                    id="nbRockFullName"
                                    alertType="validation" />

                                <div :class="getColumnClass(3)">
                                    <template v-if="adult1.isFirstNameReadOnly">
                                        <RockLabel>First Name</RockLabel>
                                        <div>{{ adult1.firstName }}</div>
                                    </template>
                                    <TextBox v-else
                                        v-model="adult1.firstName"
                                        id="tbFirstName1"
                                        label="First Name"
                                        :rules="[atLeastOneAdultFirstNameRule, adult1FirstNameRule]" />
                                </div>
                                <div :class="getColumnClass(3)">
                                    <template v-if="adult1.isLastNameReadOnly">
                                        <RockLabel>Last Name</RockLabel>
                                        <div>{{ adult1.lastName }}</div>
                                    </template>
                                    <TextBox v-else
                                        v-model="adult1.lastName"
                                        id="tbLastName1"
                                        label="Last Name"
                                        :rules="[adult1LastNameRule]" />
                                </div>
                                <div v-if="!config.isAdultGenderHidden" id="pnlGender1" :class="getColumnClass(3)">
                                    <GenderDropDownList
                                        v-model="adult1.gender"
                                        id="ddlGender1"
                                        label="Gender"
                                        :rules="isAdult1Entered && !config.isAdultGenderOptional ? 'required' : []" />
                                </div>
                                <div v-if="!config.isAdultSuffixHidden" id="pnlSuffix1" :class="getColumnClass(3)">
                                    <DefinedValuePicker
                                        v-model="adult1SuffixListItemBag"
                                        :definedTypeGuid="DefinedType.PersonSuffix"
                                        id="dvpSuffix1"
                                        label="Suffix"
                                        :rules="isAdult1Entered && !config.isAdultSuffixOptional ? 'required' : []"
                                        :showBlankItem="true" />
                                </div>
                                <div v-if="!config.isAdultBirthdayHidden" id="pnlBirthDate1" :class="getColumnClass(6)">
                                    <BirthdayPicker
                                        v-model="adult1.birthDate"
                                        id="bpBirthDate1"
                                        label="Birth Date"
                                        :rules="isAdult1Entered && !config.isAdultBirthdayOptional ? 'required' : ''" />
                                </div>
                                <div v-if="!config.isAdultMaritalStatusHidden" id="pnlMaritalStatus1" :class="getColumnClass(3)">
                                    <DefinedValuePicker
                                        v-model="adult1MaritalStatusDefinedValueGuid"
                                        :definedTypeGuid="DefinedType.PersonMaritalStatus"
                                        id="dvpMaritalStatus1"
                                        label="Marital Status"
                                        :rules="isAdult1Entered && !config.isAdultMaritalStatusOptional ? 'required': ''"
                                        :showBlankItem="true" />
                                </div>
                                <div v-if="!config.isAdultMobilePhoneHidden" :class="getColumnClass(3)" id="pnlMobilePhone1">
                                    <PhoneNumberBox
                                        v-model="adult1.mobilePhone"
                                        v-model:countryCode="adult1.mobilePhoneCountryCode"
                                        id="pnMobilePhone1"
                                        label="Mobile Phone"
                                        :rules="isAdult1Entered && !config.isAdultMobilePhoneOptional ? 'required' : []" />
                                </div>
                                <div v-if="!config.isAdultEmailHidden" id="pnlEmail1" :class="getColumnClass(6)">
                                    <EmailBox
                                        v-model="adult1.email"
                                        id="tbEmail1"
                                        label="Email"
                                        :rules="isAdult1Entered && !config.isAdultEmailOptional ? 'required' : []" />
                                </div>
                                <div id="pnlCommunicationPreference1" :class="getColumnClass(6)">
                                    <RadioButtonList
                                        v-model="adult1CommunicationPreferenceId"
                                        :horizontal="true"
                                        id="rblCommunicationPreference1"
                                        :items="[
                                            { text: 'Email', value: CommunicationPreference.Email.toString() },
                                            { text: 'SMS', value: CommunicationPreference.SMS.toString() }
                                        ]"
                                        label="Communication Preference"
                                        :rules="isAdult1Entered && !config.isAdultDisplayCommunicationPreferenceOptional ? 'required' : ''" />
                                </div>
                                <div id="pnlRace1" :class="getColumnClass(3)">
                                    <RacePicker
                                        v-if="!config.isRaceOptionHidden"
                                        v-model="adult1RaceListItemBag"
                                        id="rpRace1"
                                        :rules="isAdult1Entered && !config.isRaceOptionOptional ? 'required' : []"
                                        :showBlankItem="true" />
                                </div>
                                <div id="pnlEthnicity1" :class="getColumnClass(3)">
                                    <EthnicityPicker
                                        v-if="!config.isEthnicityOptionHidden"
                                        v-model="adult1EthnicityListItemBag"
                                        id="epEthnicity1"
                                        :rules="isAdult1Entered && !config.isEthnicityOptionOptional ? 'required' : []"
                                        :showBlankItem="true" />
                                </div>
                            </div>

                            <div class="row">
                                <div v-if="!config.isAdultProfilePhotoHidden" id="pnlProfileImage1" class="col-sm-6">
                                    <ImageUploader
                                        v-model="adult1ProfileImageListItemBag"
                                        id="imgProfile1"
                                        label="Profile Photo"
                                        :rules="isAdult1Entered && !config.isAdultProfilePhotoOptional ? 'required' : ''" />
                                </div>
                            </div>

                            <div class="row">
                                <AttributeValuesContainer
                                    v-if="adult1.attributes != null"
                                    v-model="adult1.attributeValues"
                                    :attributes="adult1.attributes"
                                    :displayWithinExistingRow="true"
                                    id="phAttributes1"
                                    isEditMode
                                    :numberOfColumns="4"
                                    :showCategoryLabel="true" />
                            </div>

                            <div class="row mt-3">
                                <div class="col-md-12">
                                    <div v-if="!config.isCreateAccountHidden" id="pnlCreateAccount">
                                        <div class="well card-createaccount">
                                            <h4 class="heading-createaccount">{{ config.createAccountTitle }}</h4>
                                            <p>{{ config.createAccountDescription }}</p>
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <TextBox
                                                        v-model="createAccount.username"
                                                        id="tbUserName"
                                                        label="Username"
                                                        :rules="!config.isCreateAccountOptional ? 'required' : ''"
                                                        @blur="checkUsernameAvailability" />
                                                    <dl id="availabilityMessageRow">
                                                        <dt></dt>
                                                        <dd>
                                                            <NotificationBox
                                                                v-if="isUsernameInUse"
                                                                id="availabilityMessage"
                                                                alertType="warning">The username you selected is already in use.
                                                            </NotificationBox>
                                                        </dd>
                                                    </dl>
                                                </div>
                                                <div class="col-md-6">
                                                    <TextBox
                                                        v-model="createAccount.password"
                                                        id="tbPassword"
                                                        label="Password"
                                                        :rules="!config.isCreateAccountOptional ? 'required' : ''"
                                                        type="password" />

                                                    <TextBox
                                                        v-model="confirmPassword"
                                                        id="tbConfirmPassword"
                                                        label="Confirm Password"
                                                        type="password"
                                                        :rules="`${!config.isCreateAccountOptional ? 'required|' : ''}${confirmPasswordRules}`" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <hr />

                            <h4 class="heading-individual">Second Adult</h4>

                            <div class="adult-2-fields">
                                <asp:HiddenField ID="hfSuffixRequired" runat="server" />
                                <asp:HiddenField ID="hfGenderRequired" runat="server" />
                                <asp:HiddenField ID="hfBirthDateRequired" runat="server" />
                                <asp:HiddenField ID="hfMaritalStatusRequired" runat="server" />
                                <asp:HiddenField ID="hfMobilePhoneRequired" runat="server" />
                                <asp:HiddenField ID="hfEmailRequired" runat="server" />
                                <asp:HiddenField ID="hfProfileRequired" runat="server" />
                                <asp:HiddenField ID="hfCreateFirstAdultAccountIsRequired" runat="server" />
                                <asp:HiddenField ID="hfRaceIsRequired" runat="server" />
                                <asp:HiddenField ID="hfEthnicityIsRequired" runat="server" />

                                <div class="row">
                                    <div :class="getColumnClass(3)">
                                        <template v-if="adult2.isFirstNameReadOnly">
                                            <RockLabel>First Name</RockLabel>
                                            <div>{{ adult2.firstName }}</div>
                                        </template>
                                        <TextBox v-else
                                            v-model="adult2.firstName"
                                            id="tbFirstName2"
                                            label="First Name"
                                            :rules="[atLeastOneAdultFirstNameRule, adult2FirstNameRule]" />
                                        </div>
                                    <div :class="getColumnClass(3)">
                                        <template v-if="adult2.isLastNameReadOnly">
                                            <RockLabel>Last Name</RockLabel>
                                            <div>{{ adult2.lastName }}</div>
                                        </template>
                                        <TextBox v-else
                                            v-model="adult2.lastName"
                                            id="tbLastName2"
                                            label="Last Name"
                                            :rules="[adult2LastNameRule]" />
                                        </div>
                                    <div v-if="!config.isAdultGenderHidden" id="pnlGender2" :class="getColumnClass(3)">
                                        <GenderDropDownList
                                            v-model="adult2.gender"
                                            id="ddlGender2"
                                            label="Gender"
                                            :rules="isAdult2Entered && !config.isAdultGenderOptional ? 'required' : []" />
                                    </div>
                                    <div v-if="!config.isAdultSuffixHidden" id="pnlSuffix2" :class="getColumnClass(3)">
                                        <DefinedValuePicker
                                            v-model="adult2SuffixListItemBag"
                                            :definedTypeGuid="DefinedType.PersonSuffix"
                                            id="dvpSuffix2"
                                            label="Suffix"
                                            :rules="isAdult2Entered && !config.isAdultSuffixOptional ? 'required' : []"
                                            :showBlankItem="true" />
                                    </div>
                                    <div v-if="!config.isAdultBirthdayHidden" id="pnlBirthDate2" :class="getColumnClass(6)">
                                        <BirthdayPicker
                                            v-model="adult2.birthDate"
                                            id="bpBirthDate2"
                                            label="Birth Date"
                                            :rules="isAdult2Entered && !config.isAdultBirthdayOptional ? 'required' : ''" />
                                    </div>
                                    <div v-if="!config.isAdultMaritalStatusHidden" id="pnlMaritalStatus2" :class="getColumnClass(3)">
                                        <DefinedValuePicker
                                            v-model="adult2MaritalStatusDefinedValueGuid"
                                            :definedTypeGuid="DefinedType.PersonMaritalStatus"
                                            id="dvpMaritalStatus2"
                                            label="Marital Status"
                                            :rules="isAdult2Entered && !config.isAdultMaritalStatusOptional ? 'required': ''"
                                            :showBlankItem="true" />
                                    </div>
                                    <div v-if="!config.isAdultMobilePhoneHidden" :class="getColumnClass(3)" id="pnlMobilePhone2">
                                        <PhoneNumberBox
                                            v-model="adult2.mobilePhone"
                                            v-model:countryCode="adult2.mobilePhoneCountryCode"
                                            id="pnMobilePhone2"
                                            label="Mobile Phone"
                                            :rules="isAdult2Entered && !config.isAdultMobilePhoneOptional ? 'required' : []" />
                                    </div>
                                    <div v-if="!config.isAdultEmailHidden" id="pnlEmail2" :class="getColumnClass(6)">
                                        <EmailBox
                                            v-model="adult2.email"
                                            id="tbEmail2"
                                            label="Email"
                                            :rules="isAdult2Entered && !config.isAdultEmailOptional ? 'required' : []" />
                                    </div>
                                    <div id="pnlCommunicationPreference2" :class="getColumnClass(6)">
                                        <RadioButtonList
                                            v-model="adult2CommunicationPreferenceId"
                                            :horizontal="true"
                                            id="rblCommunicationPreference2"
                                            :items="[
                                                { text: 'Email', value: CommunicationPreference.Email.toString() },
                                                { text: 'SMS', value: CommunicationPreference.SMS.toString() }
                                            ]"
                                            label="Communication Preference"
                                            :rules="isAdult2Entered && !config.isAdultDisplayCommunicationPreferenceOptional ? 'required' : ''" />
                                    </div>
                                    <div id="pnlRace2" :class="getColumnClass(3)">
                                        <RacePicker
                                            v-if="!config.isRaceOptionHidden"
                                            v-model="adult2RaceListItemBag"
                                            id="rpRace2"
                                            :rules="isAdult2Entered && !config.isRaceOptionOptional ? 'required' : []"
                                            :showBlankItem="true" />
                                    </div>
                                    <div id="pnlEthnicity2" :class="getColumnClass(3)">
                                        <EthnicityPicker
                                            v-if="!config.isEthnicityOptionHidden"
                                            v-model="adult2EthnicityListItemBag"
                                            id="epEthnicity2"
                                            :rules="isAdult2Entered && !config.isEthnicityOptionOptional ? 'required' : []"
                                            :showBlankItem="true" />
                                    </div>
                                </div>

                                <div class="row">
                                    <div v-if="!config.isAdultProfilePhotoHidden" id="pnlProfileImage2" class="col-sm-6">
                                        <ImageUploader
                                            v-model="adult2ProfileImageListItemBag"
                                            id="imgProfile2"
                                            label="Profile Photo"
                                            :rules="isAdult2Entered && !config.isAdultProfilePhotoOptional ? 'required' : ''" />
                                    </div>
                                </div>

                                <div class="row">
                                    <AttributeValuesContainer
                                        v-if="adult2.attributes != null"
                                        v-model="adult2.attributeValues"
                                        :attributes="adult2.attributes"
                                        :displayWithinExistingRow="true"
                                        id="phAttributes2"
                                        isEditMode
                                        :numberOfColumns="4"
                                        :showCategoryLabel="true" />
                                </div>
                            </div>

                            <hr />

                            <div class="row">
                                <div :class="getColumnClass(6)">
                                    <AddressControl
                                        v-if="!config.isAddressHidden"
                                        v-model="address"
                                        id="acAddress"
                                        label="Address"
                                        :rules="!config.isAddressOptional ? 'required' : ''"
                                        :useCountryAbbreviation="false"
                                     />
                                </div>
                                <div :class="getColumnClass(6)">
                                    <AttributeValuesContainer
                                        v-if="config.familyAttributes"
                                        v-model="familyAttributeValues"
                                        :attributes="config.familyAttributes"
                                        id="phFamilyAttributes"
                                        isEditMode
                                        :showCategoryLabel="false" />
                                </div>
                            </div>
                        </template>
                    </Panel>

                    <Panel id="pnlChildren" type="default" title="Children">
                        <PreRegistrationChildren
                            id="prChildren"
                            :relationships="config.childRelationshipTypes || []" />
                    </Panel>
                </template>

                <template #footerActions>
                    <RockButton btnType="primary" id="lbSave" type="submit" @click="onSaveClicked">Save</RockButton>
                    <RockButton btnType="link" id="lbCancel" @click="onClearClicked">Clear</RockButton>
                </template>
            </Panel>
        </RockForm>
    </div>
</template>

<script setup lang="ts">
    import { computed, nextTick, ref } from "vue";
    import PreRegistrationChildren from "./FamilyPreRegistration/preRegistrationChildren.partial.obs";
    import { CreateAccountRequest, PersonRequestBag } from "./FamilyPreRegistration/types.partial";
    import { convertPersonToPersonRequest, createListItemBagWrapper } from "./FamilyPreRegistration/utils.partial";
    import AddressControl from "@Obsidian/Controls/addressControl.obs";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer";
    import BirthdayPicker from "@Obsidian/Controls/birthdayPicker";
    import CampusPicker from "@Obsidian/Controls/campusPicker.obs";
    import DatePicker from "@Obsidian/Controls/datePicker.obs";
    import DefinedValuePicker from "@Obsidian/Controls/definedValuePicker.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList";
    import EmailBox from "@Obsidian/Controls/emailBox";
    import EthnicityPicker from "@Obsidian/Controls/ethnicityPicker.obs";
    import GenderDropDownList from "@Obsidian/Controls/genderDropDownList";
    import ImageUploader from "@Obsidian/Controls/imageUploader";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import Panel from "@Obsidian/Controls/panel";
    import PhoneNumberBox from "@Obsidian/Controls/phoneNumberBox.obs";
    import RacePicker from "@Obsidian/Controls/racePicker.obs";
    import RadioButtonList from "@Obsidian/Controls/radioButtonList";
    import RockButton from "@Obsidian/Controls/rockButton";
    import RockForm from "@Obsidian/Controls/rockForm";
    import RockLabel from "@Obsidian/Controls/rockLabel";
    import TextBox from "@Obsidian/Controls/textBox";
    import { CommunicationPreference } from "@Obsidian/Enums/Blocks/Crm/FamilyPreRegistration/communicationPreference";
    import { DefinedType } from "@Obsidian/SystemGuids/definedType";
    import { onConfigurationValuesChanged, useConfigurationValues, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
    import { useHttp } from "@Obsidian/Utility/http";
    import { ValidationResult } from "@Obsidian/ValidationRules";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { FamilyPreRegistrationInitializationBox } from "@Obsidian/ViewModels/Blocks/Crm/FamilyPreRegistration/familyPreRegistrationInitializationBox";
    import { FamilyPreRegistrationGetScheduleDatesRequestBag } from "@Obsidian/ViewModels/Blocks/Crm/FamilyPreRegistration/familyPreRegistrationGetScheduleDatesRequestBag";
    import { FamilyPreRegistrationGetScheduleDatesResponseBag } from "@Obsidian/ViewModels/Blocks/Crm/FamilyPreRegistration/familyPreRegistrationGetScheduleDatesResponseBag";
    import { FamilyPreRegistrationScheduleDateBag } from "@Obsidian/ViewModels/Blocks/Crm/FamilyPreRegistration/familyPreRegistrationScheduleDateBag";
    import { AddressControlBag } from "@Obsidian/ViewModels/Controls/addressControlBag";

    const config = useConfigurationValues<FamilyPreRegistrationInitializationBox>();
    const invokeBlockAction = useInvokeBlockAction();
    const http = useHttp();

    //#region Values

    const errorTitle = ref<string | null | undefined>();
    const errorText = ref<string | null | undefined>(config.errorMessage);
    const internalCampusListItemBag = ref<ListItemBag | null | undefined>(config.defaultCampusGuid ? { value: config.defaultCampusGuid } : undefined);
    const selectedScheduleGuids = ref<string | string[]>([]);
    const selectedTimeGuids = ref<string | string[]>([]);
    const scheduleDateItems = ref<FamilyPreRegistrationScheduleDateBag[]>([]);
    const isUsernameInUse = ref<boolean>(false);
    const confirmPassword = ref<string>("");
    const address = ref<AddressControlBag | undefined>();
    const fullName = ref<string>("");
    const adult1 = ref<PersonRequestBag>(convertPersonToPersonRequest(config.adult1));
    const adult2 = ref<PersonRequestBag>(convertPersonToPersonRequest(config.adult2));
    const createAccount = ref<CreateAccountRequest>({
        username: "",
        password: ""
    });
    const familyAttributeValues = ref<Record<string, string>>(config.familyAttributeValues || {});

    //#endregion

    //#region Computed Values

    const isAdult1Entered = computed<boolean>(() => !!adult1.value.firstName.trim());
    const adult1ProfileImageListItemBag = createListItemBagWrapper(adult1, "profilePhotoGuid");
    const adult1SuffixListItemBag = createListItemBagWrapper(adult1, "suffixDefinedValueGuid");
    const adult1MaritalStatusDefinedValueGuid = createListItemBagWrapper(adult1, "maritalStatusDefinedValueGuid");
    const adult1RaceListItemBag =  createListItemBagWrapper(adult1, "raceGuid");
    const adult1EthnicityListItemBag = createListItemBagWrapper(adult1, "ethnicityGuid");
    const adult1CommunicationPreferenceId = computed<string>({
        get() {
            return adult1.value.communicationPreference?.toString();
        },
        set(newValue: string) {
            adult1.value.communicationPreference = CommunicationPreference[newValue];
        }
    });

    const isAdult2Entered = computed<boolean>(() => !!adult2.value.firstName.trim());
    const adult2ProfileImageListItemBag = createListItemBagWrapper(adult2, "profilePhotoGuid");
    const adult2SuffixListItemBag = createListItemBagWrapper(adult2, "suffixDefinedValueGuid");
    const adult2MaritalStatusDefinedValueGuid = createListItemBagWrapper(adult2, "maritalStatusDefinedValueGuid");
    const adult2RaceListItemBag =  createListItemBagWrapper(adult2, "raceGuid");
    const adult2EthnicityListItemBag = createListItemBagWrapper(adult2, "ethnicityGuid");
    const adult2CommunicationPreferenceId = computed<string>({
        get() {
            return adult2.value.communicationPreference?.toString();
        },
        set(newValue: string) {
            adult2.value.communicationPreference = CommunicationPreference[newValue];
        }
    });

    const campusListItemBag = computed<ListItemBag | null | undefined>({
        get(): ListItemBag | null | undefined {
            return internalCampusListItemBag.value;
        },
        set(newValue: ListItemBag | null | undefined) {
            // TODO JMH Update the ddlScheduleDate and ddlScheduleTime when the campus is changed.
            internalCampusListItemBag.value = newValue;
            updateScheduleDateControl();
        }
    });

    const confirmPasswordRules = computed<string>(() => {
        return `equalsfield:and Password do not match,${createAccount.value.password}`;
    });

    const scheduleTimeItems = computed<ListItemBag[]>(() => {
        const scheduleDateItem = scheduleDateItems.value.find(s => s.value === selectedScheduleGuids.value);

        return scheduleDateItem?.scheduleTimes ?? [];
    });

    //#endregion

    //#region Event Handlers

    async function onClearClicked(): Promise<void> {
        // TODO JMH Clear (the form?)
    }

    async function onSaveClicked(): Promise<void> {
        // TODO JMH Save the family pre-registration.
        console.log("adult1: ", JSON.stringify(adult1.value, null, 4));
        console.log("adult2: ", JSON.stringify(adult2.value, null, 4));
    }

    //#endregion

    //#region Functions

    function atLeastOneAdultFirstNameRule(): ValidationResult {
        const adult1FirstName = adult1.value.firstName?.trim();
        const adult2FirstName = adult2.value.firstName?.trim();

        if (!adult1FirstName && !adult2FirstName) {
            return "is invalid. The name of at least one adult needs to be entered.";
        }

        return true;
    }

    function adult1FirstNameRule(): ValidationResult {
        const adult1FirstName = adult1.value.firstName?.trim();
        const adult1LastName = adult1.value.lastName?.trim();

        if (!adult1FirstName && adult1LastName) {
            return "is invalid. First and Last Name are required.";
        }

        return true;
    }

    function adult1LastNameRule(): ValidationResult {
        const adult1FirstName = adult1.value.firstName?.trim();
        const adult1LastName = adult1.value.lastName?.trim();

        if (adult1FirstName && !adult1LastName) {
            return "is invalid. First and Last Name are required.";
        }

        return true;
    }

    function adult2FirstNameRule(): ValidationResult {
        const adult2FirstName = adult2.value.firstName?.trim();
        const adult2LastName = adult2.value.lastName?.trim();

        if (!adult2FirstName && adult2LastName) {
            return "is invalid. First and Last Name are required.";
        }

        return true;
    }

    function adult2LastNameRule(): ValidationResult {
        const adult2FirstName = adult2.value.firstName?.trim();
        const adult2LastName = adult2.value.lastName?.trim();

        if (adult2FirstName && !adult2LastName) {
            return "is invalid. First and Last Name are required.";
        }

        return true;
    }

    /**
     * Checks availability of the current username.
     */
     async function checkUsernameAvailability(): Promise<void> {
        const username = createAccount.value.username;
        if (!username) {
            isUsernameInUse.value = false;
        }
        else {
            const response = await http.get<boolean>("/api/userlogins/available", { username });
            isUsernameInUse.value = !response.data;
        }
    }

    // TODO JMH Rewrite this to work the Obsidian way.
    // function enableRequiredFields(enable): void {
    //     $(".adult-2-fields").find("[id$='_rfv']").each(function () {
    //         var domObj = $(this).get(0);
    //         if (domObj != null) {
    //             domObj.enabled = (enable != false);
    //         }
    //     });
    // }

    function getColumnClass(columns: number): string {
        if ((columns != 3 && columns != 6) || config.columns === 4) {
            return `col-sm-${columns}`;
        }

        if (columns == 6) {
            return `col-sm-${columns}`;
        }

        return `col-sm-${columns * 2}`;
    }

    function setError(text?: string | null, title?: string | null): void {
        errorTitle.value = title;
        errorText.value = text;
    }

    async function updateScheduleDateControl(): Promise<void> {
        scheduleDateItems.value = [];

        if (config.isPlannedSchedulePanelHidden || (!config.isCampusHidden && !campusListItemBag.value)) {
            return;
        }

        const bag: FamilyPreRegistrationGetScheduleDatesRequestBag = {
            campusGuid: campusListItemBag.value?.value
        };

        const result = await invokeBlockAction<FamilyPreRegistrationGetScheduleDatesResponseBag>("GetScheduleDates", { bag });

        if (result?.data) {
            setError(result.data.errorText, result.data.errorTitle);

            if ([true, false].some(b => b === result.data?.isPlannedDatePanelHidden)) {
                config.isPlannedVisitDatePanelHidden = !!result.data.isPlannedDatePanelHidden;
            }

            if ([true, false].some(b => b === result.data?.isPlannedSchedulePanelHidden)) {
                config.isPlannedSchedulePanelHidden = !!result.data.isPlannedSchedulePanelHidden;
            }

            scheduleDateItems.value = result.data.scheduleDates ?? [];
        }
        else if (result?.errorMessage) {
            setError(result.errorMessage);
        }
    }

    //#endregion

    onConfigurationValuesChanged(useReloadBlock());

    if (!config.isPlannedSchedulePanelHidden) {
        nextTick(() => updateScheduleDateControl());
    }
</script>