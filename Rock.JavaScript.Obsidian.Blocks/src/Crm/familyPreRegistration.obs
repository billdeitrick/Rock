<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<!-- TODO JMH remove id attributes? -->
<template>
    <div>
        <div v-if="errors.length" ref="errorNotificationBox">
            <NotificationBox alertType="validation" :heading="errorTitle ?? undefined">
                <ul>
                    <li v-for="error in errors">{{ error }}</li>
                </ul>
            </NotificationBox>
        </div>
        <span ref="formErrorsScrollTarget"></span>
        <RockForm @submit="onFormSubmitted"
            @visibleValidationChanged="onVisibleValidationChanged">
            <Panel type="block" title="Family Pre-Registration">
                <template #default>
                    <Panel title="Visit Information">
                        <div class="row">
                            <CampusPicker
                                v-if="!config.isCampusHidden"
                                v-model="campusListItemBag"
                                :campusStatusFilter="config.campusStatusesFilter || []"
                                :campusTypeFilter="config.campusTypesFilter || []"
                                :disabled="isSaving || isNavigating"
                                formGroupClasses="col-md-4"
                                label="Campus"
                                :rules="!config.isCampusOptional ? ['required'] : []"
                                :showBlankItem="true"
                                 />
                            <div v-if="!config.isPlannedVisitDatePanelHidden" class="col-md-5">
                                <DatePicker
                                    v-model="plannedVisitDate"
                                    :disabled="isSaving || isNavigating"
                                    :disallowPastDateSelection="true"
                                    label="Planned Visit Date"
                                    :rules="!config.isPlannedVisitDateOptional ? ['required'] : []" />
                            </div>
                            <div v-if="!config.isPlannedSchedulePanelHidden" class="col-md-7">
                                <div class="row">
                                    <div class="col-sm-6">
                                        <DropDownList
                                            v-model="plannedVisitDate"
                                            :disabled="isSaving || isNavigating"
                                            :items="scheduleDateItems"
                                            label="Planned Visit Date"
                                            :rules="!config.isPlannedVisitDateOptional ? ['required'] : []"
                                            :showBlankItem="config.isPlannedVisitDateOptional" />
                                    </div>
                                    <div class="col-sm-6">
                                        <DropDownList
                                            v-model="scheduleGuid"
                                            :disabled="isSaving || isNavigating"
                                            :items="scheduleTimeItems"
                                            label="Planned Visit Time"
                                            :rules="!config.isPlannedVisitDateOptional ? ['required'] : []"
                                            :showBlankItem="config.isPlannedVisitDateOptional" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </Panel>

                    <Panel title="Adult Information">
                        <template #default>
                            <h4 class="heading-individual">First Adult</h4>

                            <div class="row">
                                <TextBox
                                    v-model="fullName"
                                    autocomplete="new-password"
                                    class="rock-fullname"
                                    :disabled="isSaving || isNavigating"
                                    placeholder="Please enter name (Required)" />

                                <div :class="getColumnClass(3)">
                                    <ReadonlyField
                                        v-if="adult1.isFirstNameReadOnly"
                                        label="First Name"
                                        :modelValue="adult1.firstName" />
                                    <TextBox v-else
                                        v-model="adult1.firstName"
                                        :disabled="isSaving || isNavigating"
                                        label="First Name"
                                        :rules="[atLeastOneAdultFirstNameRule, adult1FirstNameRule]" />
                                </div>
                                <div :class="getColumnClass(3)">
                                    <ReadonlyField
                                        v-if="adult1.isLastNameReadOnly"
                                        label="Last Name"
                                        :modelValue="adult1.lastName" />
                                    <TextBox v-else
                                        v-model="adult1.lastName"
                                        :disabled="isSaving || isNavigating"
                                        label="Last Name"
                                        :rules="[adult1LastNameRule]" />
                                </div>
                                <div v-if="!config.isAdultGenderHidden" :class="getColumnClass(3)">
                                    <GenderDropDownList
                                        v-model="adult1.genderStringValue"
                                        :disabled="isSaving || isNavigating"
                                        label="Gender"
                                        :rules="isAdult1Entered && !config.isAdultGenderOptional ? 'required' : []" />
                                </div>
                                <div v-if="!config.isAdultSuffixHidden" :class="getColumnClass(3)">
                                    <DefinedValuePicker
                                        v-model="adult1.suffixListItemBag"
                                        :definedTypeGuid="DefinedType.PersonSuffix"
                                        :disabled="isSaving || isNavigating"
                                        label="Suffix"
                                        lazyMode="lazy"
                                        :rules="isAdult1Entered && !config.isAdultSuffixOptional ? 'required' : []"
                                        :showBlankItem="true" />
                                </div>
                                <div v-if="!config.isAdultBirthdayHidden" :class="getColumnClass(6)">
                                    <BirthdayPicker
                                        v-model="adult1.birthDate"
                                        :disabled="isSaving || isNavigating"
                                        label="Birth Date"
                                        :rules="isAdult1Entered && !config.isAdultBirthdayOptional ? 'required' : ''" />
                                </div>
                                <div v-if="!config.isAdultMaritalStatusHidden" :class="getColumnClass(3)">
                                    <DefinedValuePicker
                                        v-model="adult1.maritalStatusListItemBag"
                                        :definedTypeGuid="DefinedType.PersonMaritalStatus"
                                        :disabled="isSaving || isNavigating"
                                        label="Marital Status"
                                        lazyMode="lazy"
                                        :rules="isAdult1Entered && !config.isAdultMaritalStatusOptional ? 'required': ''"
                                        :showBlankItem="true" />
                                </div>
                                <div v-if="!config.isAdultMobilePhoneHidden" :class="getColumnClass(3)">
                                    <PhoneNumberBox
                                        v-model="adult1.mobilePhone"
                                        v-model:countryCode="adult1.mobilePhoneCountryCode"
                                        :disabled="isSaving || isNavigating"
                                        label="Mobile Phone"
                                        :rules="isAdult1Entered && !config.isAdultMobilePhoneOptional ? 'required' : []" />
                                </div>
                                <div v-if="!config.isAdultEmailHidden" :class="getColumnClass(6)">
                                    <EmailBox
                                        v-model="adult1.email"
                                        :disabled="isSaving || isNavigating"
                                        label="Email"
                                        :rules="isAdult1Entered && !config.isAdultEmailOptional ? 'required' : []" />
                                </div>
                                <div :class="getColumnClass(6)">
                                    <RadioButtonList
                                        v-model="adult1.communicationPreferenceStringValue"
                                        :disabled="isSaving || isNavigating"
                                        :horizontal="true"
                                        :items="[
                                            { text: 'Email', value: CommunicationPreference.Email.toString() },
                                            { text: 'SMS', value: CommunicationPreference.SMS.toString() }
                                        ]"
                                        label="Communication Preference"
                                        :rules="isAdult1Entered && !config.isAdultDisplayCommunicationPreferenceOptional ? 'required' : ''" />
                                </div>
                                <div :class="getColumnClass(3)">
                                    <RacePicker
                                        v-if="!config.isRaceOptionHidden"
                                        v-model="adult1.raceListItemBag"
                                        :disabled="isSaving || isNavigating"
                                        :rules="isAdult1Entered && !config.isRaceOptionOptional ? 'required' : []"
                                        :showBlankItem="true" />
                                </div>
                                <div :class="getColumnClass(3)">
                                    <EthnicityPicker
                                        v-if="!config.isEthnicityOptionHidden"
                                        v-model="adult1.ethnicityListItemBag"
                                        :disabled="isSaving || isNavigating"
                                        :rules="isAdult1Entered && !config.isEthnicityOptionOptional ? 'required' : []"
                                        :showBlankItem="true" />
                                </div>
                            </div>

                            <div class="row">
                                <div v-if="!config.isAdultProfilePhotoHidden" class="col-sm-6">
                                    <ImageUploader
                                        v-model="adult1.profileImageListItemBag"
                                        :disabled="isSaving || isNavigating"
                                        label="Profile Photo"
                                        :rules="isAdult1Entered && !config.isAdultProfilePhotoOptional ? 'required' : ''" />
                                </div>
                            </div>

                            <div class="row">
                                <AttributeValuesContainer
                                    v-if="adult1.attributes != null"
                                    v-model="adult1.attributeValues"
                                    :attributes="adult1.attributes"
                                    columnBreakpoint="sm"
                                    :displayWithinExistingRow="true"
                                    isEditMode
                                    :numberOfColumns="12 / getColumns(3)"
                                    :showCategoryLabel="true" />
                            </div>

                            <div class="row mt-3">
                                <div class="col-md-12">
                                    <div v-if="!config.isCreateAccountHidden">
                                        <div class="well card-createaccount">
                                            <h4 class="heading-createaccount">{{ config.createAccountTitle }}</h4>
                                            <p>{{ config.createAccountDescription }}</p>
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <TextBox
                                                        v-model="createAccount.username"
                                                        :disabled="isSaving || isNavigating"
                                                        label="Username"
                                                        :rules="!config.isCreateAccountOptional ? 'required' : ''"
                                                        @blur="checkUsernameAvailability" />
                                                    <dl>
                                                        <dt></dt>
                                                        <dd>
                                                            <NotificationBox
                                                                v-if="isUsernameAvailable"
                                                                alertType="success">The selected username is available.</NotificationBox>
                                                            <NotificationBox
                                                                v-else-if="isUsernameAvailable === false"
                                                                alertType="warning">The username you selected is already in use.</NotificationBox>
                                                        </dd>
                                                    </dl>
                                                </div>
                                                <div class="col-md-6">
                                                    <TextBox
                                                        v-model="createAccount.password"
                                                        :disabled="isSaving || isNavigating"
                                                        label="Password"
                                                        :rules="!config.isCreateAccountOptional ? 'required' : ''"
                                                        type="password" />

                                                    <TextBox
                                                        v-model="confirmPassword"
                                                        :disabled="isSaving || isNavigating"
                                                        label="Confirm Password"
                                                        type="password"
                                                        :rules="`${!config.isCreateAccountOptional ? 'required|' : ''}${confirmPasswordRules}`" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <hr />

                            <h4 class="heading-individual">Second Adult</h4>

                            <div class="adult-2-fields">
                                <div class="row">
                                    <div :class="getColumnClass(3)">
                                        <ReadonlyField
                                            v-if="adult2.isFirstNameReadOnly"
                                            label="First Name"
                                            :modelValue="adult2.firstName" />
                                        <TextBox v-else
                                            v-model="adult2.firstName"
                                            :disabled="isSaving || isNavigating"
                                            label="First Name"
                                            :rules="[atLeastOneAdultFirstNameRule, adult2FirstNameRule]" />
                                        </div>
                                    <div :class="getColumnClass(3)">
                                        <ReadonlyField
                                            v-if="adult2.isLastNameReadOnly"
                                            label="Last Name"
                                            :modelValue="adult2.lastName" />
                                        <TextBox v-else
                                            v-model="adult2.lastName"
                                            :disabled="isSaving || isNavigating"
                                            label="Last Name"
                                            :rules="[adult2LastNameRule]" />
                                        </div>
                                    <div v-if="!config.isAdultGenderHidden" :class="getColumnClass(3)">
                                        <GenderDropDownList
                                            v-model="adult2.genderStringValue"
                                            :disabled="isSaving || isNavigating"
                                            label="Gender"
                                            :rules="isAdult2Entered && !config.isAdultGenderOptional ? 'required' : []" />
                                    </div>
                                    <div v-if="!config.isAdultSuffixHidden" :class="getColumnClass(3)">
                                        <DefinedValuePicker
                                            v-model="adult2.suffixListItemBag"
                                            :definedTypeGuid="DefinedType.PersonSuffix"
                                            :disabled="isSaving || isNavigating"
                                            label="Suffix"
                                            lazyMode="lazy"
                                            :rules="isAdult2Entered && !config.isAdultSuffixOptional ? 'required' : []"
                                            :showBlankItem="true" />
                                    </div>
                                    <div v-if="!config.isAdultBirthdayHidden" :class="getColumnClass(6)">
                                        <BirthdayPicker
                                            v-model="adult2.birthDate"
                                            :disabled="isSaving || isNavigating"
                                            label="Birth Date"
                                            :rules="isAdult2Entered && !config.isAdultBirthdayOptional ? 'required' : ''" />
                                    </div>
                                    <div v-if="!config.isAdultMaritalStatusHidden" :class="getColumnClass(3)">
                                        <DefinedValuePicker
                                            v-model="adult2.maritalStatusListItemBag"
                                            :definedTypeGuid="DefinedType.PersonMaritalStatus"
                                            :disabled="isSaving || isNavigating"
                                            label="Marital Status"
                                            lazyMode="lazy"
                                            :rules="isAdult2Entered && !config.isAdultMaritalStatusOptional ? 'required': ''"
                                            :showBlankItem="true" />
                                    </div>
                                    <div v-if="!config.isAdultMobilePhoneHidden" :class="getColumnClass(3)">
                                        <PhoneNumberBox
                                            v-model="adult2.mobilePhone"
                                            v-model:countryCode="adult2.mobilePhoneCountryCode"
                                            :disabled="isSaving || isNavigating"
                                            label="Mobile Phone"
                                            :rules="isAdult2Entered && !config.isAdultMobilePhoneOptional ? 'required' : []" />
                                    </div>
                                    <div v-if="!config.isAdultEmailHidden" :class="getColumnClass(6)">
                                        <EmailBox
                                            v-model="adult2.email"
                                            :disabled="isSaving || isNavigating"
                                            label="Email"
                                            :rules="isAdult2Entered && !config.isAdultEmailOptional ? 'required' : []" />
                                    </div>
                                    <div :class="getColumnClass(6)">
                                        <RadioButtonList
                                            v-model="adult2.communicationPreferenceStringValue"
                                            :disabled="isSaving || isNavigating"
                                            :horizontal="true"
                                            :items="[
                                                { text: 'Email', value: CommunicationPreference.Email.toString() },
                                                { text: 'SMS', value: CommunicationPreference.SMS.toString() }
                                            ]"
                                            label="Communication Preference"
                                            :rules="isAdult2Entered && !config.isAdultDisplayCommunicationPreferenceOptional ? 'required' : ''" />
                                    </div>
                                    <div :class="getColumnClass(3)">
                                        <RacePicker
                                            v-if="!config.isRaceOptionHidden"
                                            v-model="adult2.raceListItemBag"
                                            :disabled="isSaving || isNavigating"
                                            :rules="isAdult2Entered && !config.isRaceOptionOptional ? 'required' : []"
                                            :showBlankItem="true" />
                                    </div>
                                    <div :class="getColumnClass(3)">
                                        <EthnicityPicker
                                            v-if="!config.isEthnicityOptionHidden"
                                            v-model="adult2.ethnicityListItemBag"
                                            :disabled="isSaving || isNavigating"
                                            :rules="isAdult2Entered && !config.isEthnicityOptionOptional ? 'required' : []"
                                            :showBlankItem="true" />
                                    </div>
                                </div>

                                <div class="row">
                                    <div v-if="!config.isAdultProfilePhotoHidden" class="col-sm-6">
                                        <ImageUploader
                                            v-model="adult2.profileImageListItemBag"
                                            :disabled="isSaving || isNavigating"
                                            label="Profile Photo"
                                            :rules="isAdult2Entered && !config.isAdultProfilePhotoOptional ? 'required' : ''" />
                                    </div>
                                </div>

                                <div class="row">
                                    <AttributeValuesContainer
                                        v-if="adult2.attributes != null"
                                        v-model="adult2.attributeValues"
                                        :attributes="adult2.attributes"
                                        columnBreakpoint="sm"
                                        :displayWithinExistingRow="true"
                                        isEditMode
                                        :numberOfColumns="12 / getColumns(3)"
                                        :showCategoryLabel="true" />
                                </div>
                            </div>

                            <hr />

                            <div class="row">
                                <div :class="getColumnClass(6)">
                                    <AddressControl
                                        v-if="!config.isAddressHidden"
                                        v-model="address"
                                        :disabled="isSaving || isNavigating"
                                        label="Address"
                                        :rules="!config.isAddressOptional ? 'required' : ''"
                                        :useCountryAbbreviation="false"
                                     />
                                </div>
                                <div :class="getColumnClass(6)">
                                    <AttributeValuesContainer
                                        v-if="config.familyAttributes"
                                        v-model="familyAttributeValues"
                                        :attributes="config.familyAttributes"
                                        columnBreakpoint="sm"
                                        isEditMode
                                        :numberOfColumns="12 / getColumns(3)"
                                        :showCategoryLabel="false" />
                                </div>
                            </div>
                        </template>
                    </Panel>

                    <Panel type="default" title="Children">
                        <PreRegistrationChildren
                            v-model="children"
                            :disabled="isSaving || isNavigating"
                            :lastName="adult1.lastName"
                            @addChild="onAddChild($event)"
                            @removeChild="onRemoveChild($event)" />
                    </Panel>
                </template>

                <template #footerActions>
                    <RockButton
                        btnType="primary"
                        :disabled="isSaving || isNavigating"
                        type="submit"
                        @click="shouldScrollToFormErrors = true">Save</RockButton>
                    <RockButton
                        btnType="link"
                        :disabled="isSaving || isNavigating"
                        @click="onClearClicked">Clear</RockButton>
                </template>
            </Panel>
        </RockForm>
    </div>
</template>

<script setup lang="ts">
    import { computed, nextTick, ref } from "vue";
    import PreRegistrationChildren from "./FamilyPreRegistration/preRegistrationChildren.partial.obs";
    import { ChildRequestBag, CreateAccountRequest, PersonRequestBag } from "./FamilyPreRegistration/types.partial";
    import ReadonlyField from "./FamilyPreRegistration/readonlyField.partial.obs";
    import { convertPersonToChildRequest, convertPersonToPersonRequest, createEditablePerson, useGetColumnClass, useGetColumns } from "./FamilyPreRegistration/utils.partial";
    import AddressControl from "@Obsidian/Controls/addressControl.obs";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer";
    import BirthdayPicker from "@Obsidian/Controls/birthdayPicker";
    import CampusPicker from "@Obsidian/Controls/campusPicker.obs";
    import DatePicker from "@Obsidian/Controls/datePicker.obs";
    import DefinedValuePicker from "@Obsidian/Controls/definedValuePicker.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList";
    import EmailBox from "@Obsidian/Controls/emailBox";
    import EthnicityPicker from "@Obsidian/Controls/ethnicityPicker.obs";
    import GenderDropDownList from "@Obsidian/Controls/genderDropDownList";
    import ImageUploader from "@Obsidian/Controls/imageUploader";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import Panel from "@Obsidian/Controls/panel";
    import PhoneNumberBox from "@Obsidian/Controls/phoneNumberBox.obs";
    import RacePicker from "@Obsidian/Controls/racePicker.obs";
    import RadioButtonList from "@Obsidian/Controls/radioButtonList";
    import RockButton from "@Obsidian/Controls/rockButton";
    import RockForm from "@Obsidian/Controls/rockForm";
    import TextBox from "@Obsidian/Controls/textBox";
    import { CommunicationPreference } from "@Obsidian/Enums/Blocks/Crm/FamilyPreRegistration/communicationPreference";
    import { DefinedType } from "@Obsidian/SystemGuids/definedType";
    import { onConfigurationValuesChanged, useConfigurationValues, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
    import { FormError } from "@Obsidian/Utility/form";
    import { useHttp } from "@Obsidian/Utility/http";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { ValidationResult } from "@Obsidian/ValidationRules";
    import { FamilyPreRegistrationInitializationBox } from "@Obsidian/ViewModels/Blocks/Crm/FamilyPreRegistration/familyPreRegistrationInitializationBox";
    import { FamilyPreRegistrationGetScheduleDatesRequestBag } from "@Obsidian/ViewModels/Blocks/Crm/FamilyPreRegistration/familyPreRegistrationGetScheduleDatesRequestBag";
    import { FamilyPreRegistrationGetScheduleDatesResponseBag } from "@Obsidian/ViewModels/Blocks/Crm/FamilyPreRegistration/familyPreRegistrationGetScheduleDatesResponseBag";
    import { FamilyPreRegistrationSaveRequestBag } from "@Obsidian/ViewModels/Blocks/Crm/FamilyPreRegistration/familyPreRegistrationSaveRequestBag";
    import { FamilyPreRegistrationSaveResponseBag } from "@Obsidian/ViewModels/Blocks/Crm/FamilyPreRegistration/familyPreRegistrationSaveResponseBag";
    import { FamilyPreRegistrationScheduleDateBag } from "@Obsidian/ViewModels/Blocks/Crm/FamilyPreRegistration/familyPreRegistrationScheduleDateBag";
    import { AddressControlBag } from "@Obsidian/ViewModels/Controls/addressControlBag";

    const config = useConfigurationValues<FamilyPreRegistrationInitializationBox>();
    const getColumns = useGetColumns(config);
    const getColumnClass = useGetColumnClass(config);
    const invokeBlockAction = useInvokeBlockAction();
    const http = useHttp();

    //#region Values

    const errorNotificationBox = ref<Element | undefined>();
    const formErrorsScrollTarget = ref<Element | undefined>();
    const shouldScrollToFormErrors = ref<boolean>(false);
    const isSaving = ref<boolean>(false);
    const isNavigating = ref<boolean>(false);
    const errorTitle = ref<string | null | undefined>();
    const errors = ref<string[]>(config.errorMessage ? [config.errorMessage] : []);
    const internalCampusListItemBag = ref<ListItemBag | null | undefined>(config.defaultCampusGuid ? { value: config.defaultCampusGuid } : undefined);
    const plannedVisitDate = ref<string>("");
    const scheduleGuid = ref<string>("");
    const scheduleDateItems = ref<FamilyPreRegistrationScheduleDateBag[]>([]);
    const isUsernameAvailable = ref<boolean | null | undefined>();
    const confirmPassword = ref<string>("");
    const address = ref<AddressControlBag | undefined>(config.address ?? undefined);
    const fullName = ref<string>("");
    const adult1Request = ref<PersonRequestBag>(convertPersonToPersonRequest(config.adult1));
    const adult1 = createEditablePerson(adult1Request);
    const adult2Request = ref<PersonRequestBag>(convertPersonToPersonRequest(config.adult2));
    const adult2 = createEditablePerson(adult2Request);
    const children = ref<ChildRequestBag[]>(config.children?.map(person => convertPersonToChildRequest(person)) ?? []);
    const createAccount = ref<CreateAccountRequest>({
        username: "",
        password: ""
    });
    const familyAttributeValues = ref<Record<string, string>>(config.familyAttributeValues || {});

    //#region Computed Values

    const isAdult1Entered = computed<boolean>(() => !!adult1.firstName.trim());
    const isAdult2Entered = computed<boolean>(() => !!adult2.firstName.trim());

    const campusListItemBag = computed<ListItemBag | null | undefined>({
        get(): ListItemBag | null | undefined {
            return internalCampusListItemBag.value;
        },
        set(newValue: ListItemBag | null | undefined) {
            // TODO JMH Update the ddlScheduleDate and ddlScheduleTime when the campus is changed.
            internalCampusListItemBag.value = newValue;
            updateScheduleDateControl();
        }
    });

    const confirmPasswordRules = computed<string>(() => {
        return `equalsfield:and Password do not match,${createAccount.value.password}`;
    });

    const scheduleTimeItems = computed<ListItemBag[]>(() => {
        const scheduleDateItem = scheduleDateItems.value.find(s => s.value === plannedVisitDate.value);

        return scheduleDateItem?.scheduleTimes ?? [];
    });

    //#endregion

    //#region Event Handlers

    /**
     * Event handler for a child being added.
     */
    async function onAddChild(child: ChildRequestBag): Promise<void> {
        children.value.push(child);
    }

    /**
     * Event handler for a child being removed.
     */
    function onRemoveChild(child: ChildRequestBag): void {
        const index = children.value.indexOf(child);
        if (index !== -1) {
            children.value.splice(index, 1);
        }
    }

    function onClearClicked(): void {
        isNavigating.value = true;
        location.reload();
    }

    async function onFormSubmitted(): Promise<void> {
        try {
            isSaving.value = true;

            const bag: FamilyPreRegistrationSaveRequestBag = {
                address: address.value,
                adult1: isAdult1Entered.value ? adult1Request.value : undefined,
                adult2: isAdult2Entered.value ? adult2Request.value : undefined,
                campusGuid: internalCampusListItemBag.value?.value || null,
                children: children.value,
                createAccount: createAccount.value,
                familyAttributeValues: familyAttributeValues.value,
                familyGuid: config.familyGuid,
                fullName: fullName.value,
                plannedVisitDate: plannedVisitDate.value,
                scheduleGuid: scheduleGuid.value
            };

            clearErrors();

            const result = await invokeBlockAction<FamilyPreRegistrationSaveResponseBag>("Save", { bag });

            if (result?.data) {
                if (result.data.errors?.length) {
                    setErrors("Please correct the following:", ...result.data.errors);
                }

                if (result.data.redirectUrl) {
                    navigate(result.data.redirectUrl);
                }
            }
        }
        finally {
            isSaving.value = false;
        }
    }

    function navigate(url: string): void {
        isNavigating.value = true;
        location.href = url;
    }

    /**
     * Event handler for the visible form validation being changed.
     */
    function onVisibleValidationChanged(errors: FormError[]): void {
            // If there are any errors, then scroll them into view if we should.
        if (errors?.length && shouldScrollToFormErrors.value) {
            scrollIntoView(() => formErrorsScrollTarget.value);

            // Reset the should scroll state until we should scroll again.
            shouldScrollToFormErrors.value = false;
        }
    }

    //#endregion

    //#region Functions

    function atLeastOneAdultFirstNameRule(): ValidationResult {
        const adult1FirstName = adult1.firstName?.trim();
        const adult2FirstName = adult2.firstName?.trim();

        if (!adult1FirstName && !adult2FirstName) {
            return "is invalid. The name of at least one adult needs to be entered.";
        }

        return true;
    }

    function adult1FirstNameRule(): ValidationResult {
        const adult1FirstName = adult1.firstName?.trim();
        const adult1LastName = adult1.lastName?.trim();

        if (!adult1FirstName && adult1LastName) {
            return "is invalid. First and Last Name are required.";
        }

        return true;
    }

    function adult1LastNameRule(): ValidationResult {
        const adult1FirstName = adult1.firstName?.trim();
        const adult1LastName = adult1.lastName?.trim();

        if (adult1FirstName && !adult1LastName) {
            return "is invalid. First and Last Name are required.";
        }

        return true;
    }

    function adult2FirstNameRule(): ValidationResult {
        const adult2FirstName = adult2.firstName?.trim();
        const adult2LastName = adult2.lastName?.trim();

        if (!adult2FirstName && adult2LastName) {
            return "is invalid. First and Last Name are required.";
        }

        return true;
    }

    function adult2LastNameRule(): ValidationResult {
        const adult2FirstName = adult2.firstName?.trim();
        const adult2LastName = adult2.lastName?.trim();

        if (adult2FirstName && !adult2LastName) {
            return "is invalid. First and Last Name are required.";
        }

        return true;
    }

    /**
     * Checks availability of the current username.
     */
     async function checkUsernameAvailability(): Promise<void> {
        const username = createAccount.value.username;
        if (!username) {
            isUsernameAvailable.value = null;
        }
        else {
            const response = await http.get<boolean>("/api/userlogins/available", { username });
            isUsernameAvailable.value = !!response.data;
        }
    }

    // TODO JMH Rewrite this to work the Obsidian way.
    // function enableRequiredFields(enable): void {
    //     $(".adult-2-fields").find("[id$='_rfv']").each(function () {
    //         var domObj = $(this).get(0);
    //         if (domObj != null) {
    //             domObj.enabled = (enable != false);
    //         }
    //     });
    // }

    function clearErrors(): void {
        errorTitle.value = undefined;
        errors.value = [];
    }

    function scrollIntoView(elementGetter: () => (Element | undefined)): void {
        if (!elementGetter) {
            // Nothing to scroll to.
            return;
        }

        // Need to wait until next tick to get the element as it may not exist yet.
        nextTick(() => {
            const element = elementGetter();
            if (element && typeof element["scrollIntoView"] === "function") {
                element.scrollIntoView();
            }
        });
    }

    function setErrors(title: string | null, ...errorMessages: string[]): void {
        errorTitle.value = title;
        errors.value = errorMessages;

        scrollIntoView(() => errorNotificationBox.value);
    }

    async function updateScheduleDateControl(): Promise<void> {
        scheduleDateItems.value = [];

        if (config.isPlannedSchedulePanelHidden || (!config.isCampusHidden && !campusListItemBag.value)) {
            return;
        }

        const bag: FamilyPreRegistrationGetScheduleDatesRequestBag = {
            campusGuid: campusListItemBag.value?.value
        };

        clearErrors();
        const result = await invokeBlockAction<FamilyPreRegistrationGetScheduleDatesResponseBag>("GetScheduleDates", { bag });

        if (result?.data) {
            if (result.data.errorText) {
                setErrors(result.data.errorTitle || null, result.data.errorText);
            }

            if ([true, false].some(b => b === result.data?.isPlannedDatePanelHidden)) {
                config.isPlannedVisitDatePanelHidden = !!result.data.isPlannedDatePanelHidden;
            }

            if ([true, false].some(b => b === result.data?.isPlannedSchedulePanelHidden)) {
                config.isPlannedSchedulePanelHidden = !!result.data.isPlannedSchedulePanelHidden;
            }

            scheduleDateItems.value = result.data.scheduleDates ?? [];
        }
        else if (result?.errorMessage) {
            setErrors(null, result.errorMessage);
        }
    }

    //#endregion

    onConfigurationValuesChanged(useReloadBlock());

    if (!config.isPlannedSchedulePanelHidden) {
        nextTick(() => updateScheduleDateControl());
    }
</script>